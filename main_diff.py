...
import torch.cuda.profiler as ncu
...
parser.add_argument('--profile', default=False, type=bool, help="start profiling")
...

def train(train_loader, model, criterion, optimizer, epoch, device, args):
    ...
    for i, (images, target) in enumerate(train_loader):
        ...
        # compute output
        if args.profile:
            print("Start profiling...")
            ncu.start()
        output = model(images)
        if args.profile:
            print("End profiling...")
            ncu.stop()
            quit()
        loss = criterion(output, target)
        ...
...
